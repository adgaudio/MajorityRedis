keys can timeout in the middle of an eval!  fix this


The "already locked" failure during lock_script:
        # either locked because work is happening (good!)
        # or locked because nobody can obtain majority (bad!)
        #  - let's adjust score differently on nodes to avoid competition
        # key's score is <= number of competing clients at any given time
        # with random chance of 1 / score, don't modify score.
        # else, set score += randInt(0,score-1) / score


consider 5 clients competing for same item on 3 servers.  value of key:
111 + 2 waiting clients
then all return already locked.  all possible scores for each server are:
1, 2, 2.5, 3
solved.
but let's just say only 1 element in q.
we iterate again, and all return already locked
all possible scores for each server are:
1, 2, 2.5, 3,
 2.9,        3.3,        3.333,   3.667
#2.5+1/2.5,  2.5+2/2.5,  3+1/3,   3+2/3
numbers will continue to spread out with continued competition.

- this doesn't solve the split brain problem described in redlock algorithm
 if there is less items in q than there are redis servers.
  for this, a small random timeout of a millisecond or so could help

OLD
consider 5 clients competing for same item on 3 servers.  value of key:
111 + 2 waiting clients
then all fail with "already_locked"
try again:
222 + 2 waiting clients
then add new item to q
0
Q vals: 0222
all fail with "already_locked" and try again:
11133  + waiting clients
all 1 fails, but a 3 wins majority!

conclusion:
 --> the number of clients you can have should be:
  - less than n_keys to always get items without competition
  - less than n_keys * n_servers to guarantee no split brain issue
    at any given point in time



OLD
consider 5 clients competing for same item on 3 servers.  value of key:
111
all fail with "already_locked"
333

x x x
1 1 1
  1 1  x2 = 2
1   1
1 1    x2 = [[ 2.5 OR 2 ]]

2.5 or 2  for all 3



